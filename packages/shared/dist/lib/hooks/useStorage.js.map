{
  "version": 3,
  "sources": ["../../../lib/hooks/useStorage.tsx"],
  "sourcesContent": ["import { useSyncExternalStore } from 'react';\r\nimport type { BaseStorage } from '@extension/storage';\r\n\r\ntype WrappedPromise = ReturnType<typeof wrapPromise>;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst storageMap: Map<BaseStorage<any>, WrappedPromise> = new Map();\r\n\r\nexport function useStorage<\r\n  Storage extends BaseStorage<Data>,\r\n  Data = Storage extends BaseStorage<infer Data> ? Data : unknown,\r\n>(storage: Storage) {\r\n  const _data = useSyncExternalStore<Data | null>(storage.subscribe, storage.getSnapshot);\r\n\r\n  if (!storageMap.has(storage)) {\r\n    storageMap.set(storage, wrapPromise(storage.get()));\r\n  }\r\n  if (_data !== null) {\r\n    storageMap.set(storage, { read: () => _data });\r\n  }\r\n\r\n  return (_data ?? storageMap.get(storage)!.read()) as Exclude<Data, PromiseLike<unknown>>;\r\n}\r\n\r\nfunction wrapPromise<R>(promise: Promise<R>) {\r\n  let status = 'pending';\r\n  let result: R;\r\n  const suspender = promise.then(\r\n    r => {\r\n      status = 'success';\r\n      result = r;\r\n    },\r\n    e => {\r\n      status = 'error';\r\n      result = e;\r\n    },\r\n  );\r\n\r\n  return {\r\n    read() {\r\n      switch (status) {\r\n        case 'pending':\r\n          throw suspender;\r\n        case 'error':\r\n          throw result;\r\n        default:\r\n          return result;\r\n      }\r\n    },\r\n  };\r\n}\r\n"],
  "mappings": ";AAAA,SAAS,4BAA4B;AAKrC,MAAM,aAAoD,oBAAI,IAAI;AAE3D,gBAAS,WAGd,SAAkB;AAClB,QAAM,QAAQ,qBAAkC,QAAQ,WAAW,QAAQ,WAAW;AAEtF,MAAI,CAAC,WAAW,IAAI,OAAO,GAAG;AAC5B,eAAW,IAAI,SAAS,YAAY,QAAQ,IAAI,CAAC,CAAC;AAAA,EACpD;AACA,MAAI,UAAU,MAAM;AAClB,eAAW,IAAI,SAAS,EAAE,MAAM,MAAM,MAAM,CAAC;AAAA,EAC/C;AAEA,SAAQ,wBAAS,WAAW,IAAI,OAAO,EAAG,KAAK;AACjD;AAEA,SAAS,YAAe,SAAqB;AAC3C,MAAI,SAAS;AACb,MAAI;AACJ,QAAM,YAAY,QAAQ;AAAA,IACxB,OAAK;AACH,eAAS;AACT,eAAS;AAAA,IACX;AAAA,IACA,OAAK;AACH,eAAS;AACT,eAAS;AAAA,IACX;AAAA,EACF;AAEA,SAAO;AAAA,IACL,OAAO;AACL,cAAQ,QAAQ;AAAA,QACd,KAAK;AACH,gBAAM;AAAA,QACR,KAAK;AACH,gBAAM;AAAA,QACR;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
