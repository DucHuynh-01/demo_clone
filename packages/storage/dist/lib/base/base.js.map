{
  "version": 3,
  "sources": ["../../../lib/base/base.ts"],
  "sourcesContent": ["import type { BaseStorage, StorageConfig, ValueOrUpdate } from './types';\r\nimport { SessionAccessLevelEnum, StorageEnum } from './enums';\r\n\r\n/**\r\n * Chrome reference error while running `processTailwindFeatures` in tailwindcss.\r\n *  To avoid this, we need to check if the globalThis.chrome is available and add fallback logic.\r\n */\r\nconst chrome = globalThis.chrome;\r\n\r\n/**\r\n * Sets or updates an arbitrary cache with a new value or the result of an update function.\r\n */\r\nasync function updateCache<D>(valueOrUpdate: ValueOrUpdate<D>, cache: D | null): Promise<D> {\r\n  // Type guard to check if our value or update is a function\r\n  function isFunction<D>(value: ValueOrUpdate<D>): value is (prev: D) => D | Promise<D> {\r\n    return typeof value === 'function';\r\n  }\r\n\r\n  // Type guard to check in case of a function, if its a Promise\r\n  function returnsPromise<D>(func: (prev: D) => D | Promise<D>): func is (prev: D) => Promise<D> {\r\n    // Use ReturnType to infer the return type of the function and check if it's a Promise\r\n    return (func as (prev: D) => Promise<D>) instanceof Promise;\r\n  }\r\n\r\n  if (isFunction(valueOrUpdate)) {\r\n    // Check if the function returns a Promise\r\n    if (returnsPromise(valueOrUpdate)) {\r\n      return valueOrUpdate(cache as D);\r\n    } else {\r\n      return valueOrUpdate(cache as D);\r\n    }\r\n  } else {\r\n    return valueOrUpdate;\r\n  }\r\n}\r\n\r\n/**\r\n * If one session storage needs access from content scripts, we need to enable it globally.\r\n * @default false\r\n */\r\nlet globalSessionAccessLevelFlag: StorageConfig['sessionAccessForContentScripts'] = false;\r\n\r\n/**\r\n * Checks if the storage permission is granted in the manifest.json.\r\n */\r\nfunction checkStoragePermission(storageEnum: StorageEnum): void {\r\n  if (!chrome) {\r\n    return;\r\n  }\r\n\r\n  if (chrome.storage[storageEnum] === undefined) {\r\n    throw new Error(`Check your storage permission in manifest.json: ${storageEnum} is not defined`);\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a storage area for persisting and exchanging data.\r\n */\r\nexport function createStorage<D = string>(key: string, fallback: D, config?: StorageConfig<D>): BaseStorage<D> {\r\n  let cache: D | null = null;\r\n  let initedCache = false;\r\n  let listeners: Array<() => void> = [];\r\n\r\n  const storageEnum = config?.storageEnum ?? StorageEnum.Local;\r\n  const liveUpdate = config?.liveUpdate ?? false;\r\n\r\n  const serialize = config?.serialization?.serialize ?? ((v: D) => v);\r\n  const deserialize = config?.serialization?.deserialize ?? (v => v as D);\r\n\r\n  // Set global session storage access level for StoryType.Session, only when not already done but needed.\r\n  if (\r\n    globalSessionAccessLevelFlag === false &&\r\n    storageEnum === StorageEnum.Session &&\r\n    config?.sessionAccessForContentScripts === true\r\n  ) {\r\n    checkStoragePermission(storageEnum);\r\n    chrome?.storage[storageEnum]\r\n      .setAccessLevel({\r\n        accessLevel: SessionAccessLevelEnum.ExtensionPagesAndContentScripts,\r\n      })\r\n      .catch(error => {\r\n        console.warn(error);\r\n        console.warn('Please call setAccessLevel into different context, like a background script.');\r\n      });\r\n    globalSessionAccessLevelFlag = true;\r\n  }\r\n\r\n  // Register life cycle methods\r\n  const get = async (): Promise<D> => {\r\n    checkStoragePermission(storageEnum);\r\n    const value = await chrome?.storage[storageEnum].get([key]);\r\n\r\n    if (!value) {\r\n      return fallback;\r\n    }\r\n\r\n    return deserialize(value[key]) ?? fallback;\r\n  };\r\n\r\n  const _emitChange = () => {\r\n    listeners.forEach(listener => listener());\r\n  };\r\n\r\n  const set = async (valueOrUpdate: ValueOrUpdate<D>) => {\r\n    if (initedCache === false) {\r\n      cache = await get();\r\n    }\r\n    cache = await updateCache(valueOrUpdate, cache);\r\n\r\n    await chrome?.storage[storageEnum].set({ [key]: serialize(cache) });\r\n    _emitChange();\r\n  };\r\n\r\n  const subscribe = (listener: () => void) => {\r\n    listeners = [...listeners, listener];\r\n\r\n    return () => {\r\n      listeners = listeners.filter(l => l !== listener);\r\n    };\r\n  };\r\n\r\n  const getSnapshot = () => {\r\n    return cache;\r\n  };\r\n\r\n  get().then(data => {\r\n    cache = data;\r\n    initedCache = true;\r\n    _emitChange();\r\n  });\r\n\r\n  // Listener for live updates from the browser\r\n  async function _updateFromStorageOnChanged(changes: { [key: string]: chrome.storage.StorageChange }) {\r\n    // Check if the key we are listening for is in the changes object\r\n    if (changes[key] === undefined) return;\r\n\r\n    const valueOrUpdate: ValueOrUpdate<D> = deserialize(changes[key].newValue);\r\n\r\n    if (cache === valueOrUpdate) return;\r\n\r\n    cache = await updateCache(valueOrUpdate, cache);\r\n\r\n    _emitChange();\r\n  }\r\n\r\n  // Register listener for live updates for our storage area\r\n  if (liveUpdate) {\r\n    chrome?.storage[storageEnum].onChanged.addListener(_updateFromStorageOnChanged);\r\n  }\r\n\r\n  return {\r\n    get,\r\n    set,\r\n    getSnapshot,\r\n    subscribe,\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": ["_a"]
}
